app MakeLoop {
  wasp: {
    version: "^0.13.0"
  },
  title: "MakeLoop",
  head: [
    "<link rel=\"icon\" href=\"/favicon.ico\" type=\"image/x-icon\" />"
  ],
  client: {
    rootComponent: import { Layout } from "@src/Layout.jsx",
  },
  db: {
    system: PostgreSQL,
    prisma: {
      clientPreviewFeatures: ["extendedWhereUnique"]
    }
  },
  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {
        userSignupFields: import { userSignupFields } from "@src/pages/auth/signup.js",
      }
    },
    onAuthFailedRedirectTo: "/",
    onAuthSucceededRedirectTo: "/"
  }
}

// Routes
route HomeRoute { path: "/", to: HomePage }
page HomePage {
  component: import HomePage from "@src/pages/views/Home.jsx",
  authRequired: false
}
route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@src/pages/auth/Login.jsx"
}
route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import Signup from "@src/pages/auth/Signup.jsx"
}
route ProfileRoute { path: "/:username", to: ProfilePage }
page ProfilePage {
  component: import ProfilePage from "@src/pages/views/Profile.jsx"
}
route NotFound { path: "/pages/404", to: NotFoundPage }
page NotFoundPage {
  component: import NotFoundPage from "@src/pages/views/NotFound.jsx",
  authRequired: false
}

// Entities
entity User {=psl
  id                  Int      @id @default(autoincrement())
  username            String   @unique
  profileImage        String?
  bio                 String?
  checkins            Checkin[]
  createdLoops        Loop[]   @relation("UserLoops")
  watchedLoops        Loop[]   @relation("LoopWatchers")
  participatedLoops   Loop[]   @relation("LoopParticipants")

psl=}

entity Loop {=psl
  id            Int        @id @default(autoincrement())
  name          String
  projectType   String
  numIterations Int
  frequency     String     // e.g., "daily", "weekly", "monthly"
  isActive      Boolean    @default(true)
  createdById   Int
  createdBy     User       @relation("UserLoops", fields: [createdById], references: [id])
  watchers      User[]     @relation("LoopWatchers")
  participants  User[]     @relation("LoopParticipants")
  iterations    Iteration[]
psl=}

entity Iteration {=psl
  id          Int      @id @default(autoincrement())
  loopId      Int
  loop        Loop     @relation(fields: [loopId], references: [id])
  startTime   DateTime
  endTime     DateTime
  checkins    Checkin[]
  completed   Boolean  @default(false)
psl=}

entity Checkin {=psl
  id          Int       @id @default(autoincrement())
  iterationId Int
  iteration   Iteration @relation(fields: [iterationId], references: [id])
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  createdAt   DateTime  @default(now())
  proofOfWork String
psl=}

// Actions
action createLoop {
  fn: import { createLoop } from "@src/actions.js",
  entities: [Loop]
}
action deleteLoop {
  fn: import { deleteLoop } from "@src/actions.js",
  entities: [Loop, Iteration, Checkin]
}
action deactivateLoop {
  fn: import { deactivateLoop } from "@src/actions.js",
  entities: [Loop]
}
action joinLoop {
  fn: import { joinLoop } from "@src/actions.js",
  entities: [Loop]
}

action watchLoop {
  fn: import { watchLoop } from "@src/actions.js",
  entities: [Loop]  
}

action leaveLoop {
  fn: import { leaveLoop } from "@src/actions.js", 
  entities: [Loop]
}

action unwatchLoop {
  fn: import { unwatchLoop } from "@src/actions.js",
  entities: [Loop]
}
action createIteration {
  fn: import { createIteration } from "@src/actions.js",
  entities: [Iteration, Loop]
}
action createCheckin {
  fn: import { createCheckin } from "@src/actions.js",
  entities: [Checkin, Iteration]
}
action createIterations {
  fn: import { createIterations } from "@src/actions.js",
  entities: [Iteration, Loop]
}

// Queries
query getUser {
  fn: import { getUser } from "@src/queries.js",
  entities: [User]
}
query getUserByUsername {
  fn: import { getUserByUsername } from "@src/queries.js",
  entities: [User]
}

query getLoops {
  fn: import { getLoops } from "@src/queries.js",
  entities: [Loop]
}
query getActiveLoops {
  fn: import { getActiveLoops } from "@src/queries.js",
  entities: [Loop]
}
query getLoopParticipants {
  fn: import { getLoopParticipants } from "@src/queries.js",
  entities: [User, Loop]
}
query getLoopWatchers {
  fn: import { getLoopWatchers } from "@src/queries.js",
  entities: [User, Loop]
}
query getLoopById {
  fn: import { getLoopById } from "@src/queries.js",
  entities: [Loop]
}
query getIterationsByLoopId {
  fn: import { getIterationsByLoopId } from "@src/queries.js",
  entities: [Iteration]
}
query getCheckinsByIterationId {
  fn: import { getCheckinsByIterationId } from "@src/queries.js",
  entities: [Checkin, User]
}

